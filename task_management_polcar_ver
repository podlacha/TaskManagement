CREATE DATABASE TaskManagement;
USE TaskManagement;

-- Tabela TENANTS dla obsługi multi-tenant
CREATE TABLE TENANTS (
    TenantID INT PRIMARY KEY AUTO_INCREMENT,
    TenantName VARCHAR(255) NOT NULL UNIQUE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela DATES dla przechowywania miesięcy
CREATE TABLE DATES (
    DateID INT PRIMARY KEY AUTO_INCREMENT,
    Rok YEAR NOT NULL,
    Miesiąc TINYINT NOT NULL,
    UNIQUE KEY (Rok, Miesiąc)
);

-- Wypełnienie tabeli DATES danymi
INSERT INTO DATES (Rok, Miesiąc)
SELECT y, m FROM (
    SELECT 2020 + (n DIV 12) AS y, (n % 12) + 1 AS m
    FROM (SELECT 0 n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3
          UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7
          UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11
          UNION ALL SELECT 12 UNION ALL SELECT 13 UNION ALL SELECT 14 UNION ALL SELECT 15
          UNION ALL SELECT 16 UNION ALL SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19
          UNION ALL SELECT 20 UNION ALL SELECT 21 UNION ALL SELECT 22 UNION ALL SELECT 23
          UNION ALL SELECT 24 UNION ALL SELECT 25 UNION ALL SELECT 26 UNION ALL SELECT 27
          UNION ALL SELECT 28 UNION ALL SELECT 29 UNION ALL SELECT 30 UNION ALL SELECT 31
          UNION ALL SELECT 32 UNION ALL SELECT 33 UNION ALL SELECT 34 UNION ALL SELECT 35
          UNION ALL SELECT 36 UNION ALL SELECT 37 UNION ALL SELECT 38 UNION ALL SELECT 39
          UNION ALL SELECT 40 UNION ALL SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43
          UNION ALL SELECT 44 UNION ALL SELECT 45 UNION ALL SELECT 46 UNION ALL SELECT 47
          UNION ALL SELECT 48 UNION ALL SELECT 49 UNION ALL SELECT 50 UNION ALL SELECT 51
          UNION ALL SELECT 52 UNION ALL SELECT 53 UNION ALL SELECT 54 UNION ALL SELECT 55
          UNION ALL SELECT 56 UNION ALL SELECT 57 UNION ALL SELECT 58 UNION ALL SELECT 59
          UNION ALL SELECT 60 UNION ALL SELECT 61 UNION ALL SELECT 62 UNION ALL SELECT 63
          UNION ALL SELECT 64 UNION ALL SELECT 65 UNION ALL SELECT 66 UNION ALL SELECT 67
          UNION ALL SELECT 68 UNION ALL SELECT 69 UNION ALL SELECT 70 UNION ALL SELECT 71
          UNION ALL SELECT 72 UNION ALL SELECT 73 UNION ALL SELECT 74 UNION ALL SELECT 75
          UNION ALL SELECT 76 UNION ALL SELECT 77 UNION ALL SELECT 78 UNION ALL SELECT 79
          UNION ALL SELECT 80 UNION ALL SELECT 81 UNION ALL SELECT 82 UNION ALL SELECT 83
          UNION ALL SELECT 84 UNION ALL SELECT 85 UNION ALL SELECT 86 UNION ALL SELECT 87
          UNION ALL SELECT 88 UNION ALL SELECT 89 UNION ALL SELECT 90 UNION ALL SELECT 91
          UNION ALL SELECT 92 UNION ALL SELECT 93 UNION ALL SELECT 94 UNION ALL SELECT 95
          UNION ALL SELECT 96 UNION ALL SELECT 97 UNION ALL SELECT 98 UNION ALL SELECT 99
          UNION ALL SELECT 100 UNION ALL SELECT 101 UNION ALL SELECT 102 UNION ALL SELECT 103
          UNION ALL SELECT 104 UNION ALL SELECT 105 UNION ALL SELECT 106 UNION ALL SELECT 107
          UNION ALL SELECT 108 UNION ALL SELECT 109 UNION ALL SELECT 110 UNION ALL SELECT 111
          UNION ALL SELECT 112 UNION ALL SELECT 113 UNION ALL SELECT 114 UNION ALL SELECT 115
          UNION ALL SELECT 116 UNION ALL SELECT 117 UNION ALL SELECT 118 UNION ALL SELECT 119) t
) months;

-- Tabela ZADANIA z partycjonowaniem na lata
CREATE TABLE ZADANIA (
    TaskID INT PRIMARY KEY AUTO_INCREMENT,
    TenantID INT NOT NULL,
    UserID INT NOT NULL,
    Nagłówek VARCHAR(255) NOT NULL,
    Priorytet ENUM('Niski', 'Średni', 'Wysoki') NOT NULL,
    Opis TEXT,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (TenantID) REFERENCES TENANTS(TenantID) ON DELETE CASCADE,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    INDEX idx_tasks_userid (UserID),
    INDEX idx_tasks_tenantid (TenantID),
    INDEX idx_tasks_createdat (CreatedAt)
)
PARTITION BY RANGE (YEAR(CreatedAt)) (
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION pmax VALUES LESS THAN MAXVALUE
);

-- Tabela HISTORIA_ZMIAN dla śledzenia zmian w zadaniach
CREATE TABLE HISTORIA_ZMIAN (
    ChangeID INT PRIMARY KEY AUTO_INCREMENT,
    TenantID INT NOT NULL,
    TaskID INT,
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ChangedBy INT,
    OldNagłówek VARCHAR(255),
    OldPriorytet ENUM('Niski', 'Średni', 'Wysoki'),
    OldOpis TEXT,
    FOREIGN KEY (TenantID) REFERENCES TENANTS(TenantID) ON DELETE CASCADE,
    FOREIGN KEY (TaskID) REFERENCES ZADANIA(TaskID) ON DELETE CASCADE,
    FOREIGN KEY (ChangedBy) REFERENCES Users(UserID) ON DELETE SET NULL,
    INDEX idx_history_taskid (TaskID)
);

-- Tabela STATYSTYKI z podziałem na miesiące
CREATE TABLE STATYSTYKI (
    StatID INT PRIMARY KEY AUTO_INCREMENT,
    TenantID INT NOT NULL,
    Podwładny INT NOT NULL,
    Rok YEAR NOT NULL,
    Miesiąc TINYINT NOT NULL,
    Status ENUM('Aktywne', 'Zakończone', 'Oczekujące') NOT NULL,
    LiczbaZadań INT NOT NULL,
    FOREIGN KEY (TenantID) REFERENCES TENANTS(TenantID) ON DELETE CASCADE,
    FOREIGN KEY (Podwładny) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (Rok, Miesiąc) REFERENCES DATES(Rok, Miesiąc) ON DELETE CASCADE,
    INDEX idx_stats_month (TenantID, Rok, Miesiąc)
);

-- Widok dla menedżera do podglądu statystyk
CREATE VIEW ManagerStats AS
SELECT u.TenantID, u.UserID, u.Username AS Podwładny, d.Rok, d.Miesiąc, 
       COALESCE(COUNT(z.TaskID), 0) AS LiczbaZadań
FROM Users u
CROSS JOIN DATES d
LEFT JOIN ZADANIA z ON u.UserID = z.UserID 
                    AND u.TenantID = z.TenantID 
                    AND YEAR(z.CreatedAt) = d.Rok 
                    AND MONTH(z.CreatedAt) = d.Miesiąc
WHERE u.Role = 'User'
GROUP BY u.TenantID, u.UserID, d.Rok, d.Miesiąc;

-- Uprawnienia dla użytkowników
GRANT SELECT, INSERT, UPDATE, DELETE ON ZADANIA TO 'User';
GRANT SELECT ON HISTORIA_ZMIAN TO 'User';
GRANT SELECT, INSERT, UPDATE, DELETE ON ZADANIA TO 'Manager';
GRANT SELECT ON STATYSTYKI TO 'Manager';
GRANT SELECT ON ManagerStats TO 'Manager';
